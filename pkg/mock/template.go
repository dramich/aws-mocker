package mock

var fullTemplate = `// Code generated by aws-mocker; DO NOT EDIT.

package {{.PackageName}}

import (
	"context"
	"fmt"

	awsmiddle "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/smithy-go/middleware"
	{{- range $i, $j := .Middlewares }}
	"{{ $i.Path }}"
	{{- end }}
)


{{- range $package, $funcs := .Middlewares }}

type {{ $package.Name | ToTitle }}Mock struct {
	callCount map[string]int
	{{ range $funcs -}}
	{{ .FuncName | LowerCaseFirst }}MockReturns {{ .FuncName }}Returns
	{{ end -}}
}

func New{{ $package.Name | ToTitle }}Mock() *{{ $package.Name | ToTitle }}Mock {
	return &{{ $package.Name | ToTitle }}Mock{
		callCount: make(map[string]int),
	}
}

func ({{ $package.Name | FirstCharLower }} *{{ $package.Name | ToTitle }}Mock) GetCallCount() map[string]int {
	return {{ $package.Name | FirstCharLower }}.callCount
}

{{ range $funcs }}
type {{ .FuncName }}Returns struct {
	Return {{ $package.Name }}.{{ .Return }}
	Error error
}

func ({{ $package.Name | FirstCharLower }} *{{ $package.Name | ToTitle }}Mock) Set{{ .FuncName }}Return (o {{ $package.Name }}.{{ .Return }}) {
	{{ $package.Name | FirstCharLower }}.{{ .FuncName | LowerCaseFirst }}MockReturns.Return = o
}

func ({{ $package.Name | FirstCharLower }} *{{ $package.Name | ToTitle }}Mock) Set{{ .FuncName }}Error (e error) {
	{{ $package.Name | FirstCharLower }}.{{ .FuncName | LowerCaseFirst }}MockReturns.Error = e
}
{{ end }}

func ({{ $package.Name | FirstCharLower }} *{{ $package.Name | ToTitle }}Mock) {{ $package.Name | ToTitle }}MiddlewareInjector() func(stack *middleware.Stack) error {
	return func(stack *middleware.Stack) error {
		return stack.Finalize.Add(
			middleware.FinalizeMiddlewareFunc(
				"{{ $package.Name | ToTitle }}Middleware",
				func(ctx context.Context, input middleware.FinalizeInput, handler middleware.FinalizeHandler) (middleware.FinalizeOutput, middleware.Metadata, error) {
					switch awsmiddle.GetOperationName(ctx) {
					{{- range $funcs -}}
					case "{{ .FuncName }}":
						{{ $package.Name | FirstCharLower }}.callCount["{{ .FuncName }}"] += 1
						return middleware.FinalizeOutput{
							Result: &{{ $package.Name | FirstCharLower }}.{{ .FuncName | LowerCaseFirst }}MockReturns.Return,
						}, middleware.Metadata{}, {{ $package.Name | FirstCharLower }}.{{ .FuncName | LowerCaseFirst }}MockReturns.Error
					{{ end -}}
					{{ if $.ClientDefault -}}
					default:
						panic(fmt.Sprintf("Operation is not mocked %s", awsmiddle.GetOperationName(ctx)))
					}
					{{ else -}}
					}

					return middleware.FinalizeOutput{}, middleware.Metadata{}, nil
					{{ end }}
				},
			),
			middleware.Before,
		)
	}
}
{{ end }}`
