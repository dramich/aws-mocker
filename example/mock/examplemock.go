// Code generated by aws-mocker; DO NOT EDIT.

package examplemock

import (
	"context"

	awsmiddle "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/sts"
	"github.com/aws/smithy-go/middleware"
)

type DynamodbMock struct {
	callCount               map[string]int
	listTablesMockReturns   ListTablesReturns
	batchGetItemMockReturns BatchGetItemReturns
}

func NewDynamodbMock() *DynamodbMock {
	return &DynamodbMock{
		callCount: make(map[string]int),
	}
}

func (d *DynamodbMock) GetCallCount() map[string]int {
	return d.callCount
}

type ListTablesReturns struct {
	Return dynamodb.ListTablesOutput
	Error  error
}

func (d *DynamodbMock) SetListTablesReturn(o dynamodb.ListTablesOutput) {
	d.listTablesMockReturns.Return = o
}

func (d *DynamodbMock) SetListTablesError(e error) {
	d.listTablesMockReturns.Error = e
}

type BatchGetItemReturns struct {
	Return dynamodb.BatchGetItemOutput
	Error  error
}

func (d *DynamodbMock) SetBatchGetItemReturn(o dynamodb.BatchGetItemOutput) {
	d.batchGetItemMockReturns.Return = o
}

func (d *DynamodbMock) SetBatchGetItemError(e error) {
	d.batchGetItemMockReturns.Error = e
}

func (d *DynamodbMock) DynamodbMiddlewareInjector() func(stack *middleware.Stack) error {
	return func(stack *middleware.Stack) error {
		return stack.Finalize.Add(
			middleware.FinalizeMiddlewareFunc(
				"DynamodbMiddleware",
				func(ctx context.Context, input middleware.FinalizeInput, handler middleware.FinalizeHandler) (middleware.FinalizeOutput, middleware.Metadata, error) {
					switch awsmiddle.GetOperationName(ctx) {
					case "ListTables":
						d.callCount["ListTables"] += 1
						return middleware.FinalizeOutput{
							Result: &d.listTablesMockReturns.Return,
						}, middleware.Metadata{}, d.listTablesMockReturns.Error
					case "BatchGetItem":
						d.callCount["BatchGetItem"] += 1
						return middleware.FinalizeOutput{
							Result: &d.batchGetItemMockReturns.Return,
						}, middleware.Metadata{}, d.batchGetItemMockReturns.Error
					}

					return middleware.FinalizeOutput{}, middleware.Metadata{}, nil

				},
			),
			middleware.Before,
		)
	}
}

type STSMock struct {
	callCount             map[string]int
	assumeRoleMockReturns AssumeRoleReturns
}

func NewSTSMock() *STSMock {
	return &STSMock{
		callCount: make(map[string]int),
	}
}

func (s *STSMock) GetCallCount() map[string]int {
	return s.callCount
}

type AssumeRoleReturns struct {
	Return sts.AssumeRoleOutput
	Error  error
}

func (s *STSMock) SetAssumeRoleReturn(o sts.AssumeRoleOutput) {
	s.assumeRoleMockReturns.Return = o
}

func (s *STSMock) SetAssumeRoleError(e error) {
	s.assumeRoleMockReturns.Error = e
}

func (s *STSMock) STSMiddlewareInjector() func(stack *middleware.Stack) error {
	return func(stack *middleware.Stack) error {
		return stack.Finalize.Add(
			middleware.FinalizeMiddlewareFunc(
				"STSMiddleware",
				func(ctx context.Context, input middleware.FinalizeInput, handler middleware.FinalizeHandler) (middleware.FinalizeOutput, middleware.Metadata, error) {
					switch awsmiddle.GetOperationName(ctx) {
					case "AssumeRole":
						s.callCount["AssumeRole"] += 1
						return middleware.FinalizeOutput{
							Result: &s.assumeRoleMockReturns.Return,
						}, middleware.Metadata{}, s.assumeRoleMockReturns.Error
					}

					return middleware.FinalizeOutput{}, middleware.Metadata{}, nil

				},
			),
			middleware.Before,
		)
	}
}
